{
    "version": "https://jsonfeed.org/version/1",
    "title": "goal-web",
    "description": "",
    "home_page_url": "https://goal-web.com",
    "feed_url": "https://goal-web.com/feed.json",
    "user_comment": "",
    "author": {
        "name": "qbhy"
    },
    "items": [
        {
            "id": "https://goal-web.com/shu-ju-ku-zu-jian.html",
            "url": "https://goal-web.com/shu-ju-ku-zu-jian.html",
            "title": "数据库组件",
            "summary": "Goal-web/database goal-web/database goal 框架的数据库组件，当然你也可以在 goal 之外的框架使用他。 目前数据库组件暂时不能使用关联关系，你可以用 WhereExists 来代替 go get github.com/goal-web/database 使用 - usage goal 的脚手架自带了绝大多数开发一个 web 应用的所需要的功能和组件，当然包括了数据库组件。一般情况下，我们只需要在 .env 修改自己的数据库配置即可，添加数据库连接可以 config/database.go 修改 Connections 属性。 默认情况下，config/database.go 配置文件像下面那样，默认添加了 sqlite、MySQL、postgresSql 三个数据库连接的配置 和 Laravel 不同的是，goal 把 redis 配置独立出去了，因为 redis 也是一个独立的模块，不想让 redis 依赖 database package config import ( &quot;github.com/goal-web/contracts&quot;&hellip;",
            "content_html": "<h1 id=\"goal-webdatabase\">Goal-web/database</h1>\n<p><a href=\"https://github.com/goal-web/database\">goal-web/database</a><br>goal 框架的数据库组件，当然你也可以在 goal 之外的框架使用他。</p>\n<blockquote>\n<p>目前数据库组件暂时不能使用关联关系，你可以用 <code>WhereExists</code> 来代替</p>\n</blockquote>\n<h2 id=\"安装---install\">安装 - install</h2>\n<pre><code class=\"language-bash\">go get github.com/goal-web/database\n</code></pre>\n<h2 id=\"使用---usage\">使用 - usage</h2>\n<p>goal 的脚手架自带了绝大多数开发一个 web 应用的所需要的功能和组件，当然包括了数据库组件。一般情况下，我们只需要在 .env 修改自己的数据库配置即可，添加数据库连接可以 <code>config/database.go</code> 修改 <code>Connections</code> 属性。</p>\n<h3 id=\"配置---config\">配置 - config</h3>\n<p>默认情况下，<code>config/database.go</code> 配置文件像下面那样，默认添加了 sqlite、MySQL、postgresSql 三个数据库连接的配置</p>\n<blockquote>\n<p>和 <code>Laravel</code> 不同的是，goal 把 redis 配置独立出去了，因为 redis 也是一个独立的模块，不想让 redis 依赖 database</p>\n</blockquote>\n<pre><code class=\"language-go\">package config\nimport (\n    &quot;github.com/goal-web/contracts&quot;\n    &quot;github.com/goal-web/database&quot;\n)\nfunc init() {\n    configs[&quot;database&quot;] = func(env contracts.Env) interface{} {\n        return database.Config{\n            Default: env.StringOption(&quot;db.connection&quot;, &quot;mysql&quot;),\n            Connections: map[string]contracts.Fields{\n                &quot;sqlite&quot;: {\n                    &quot;driver&quot;:   &quot;sqlite&quot;,\n                    &quot;database&quot;: env.GetString(&quot;sqlite.database&quot;),\n                },\n                &quot;mysql&quot;: {\n                    &quot;driver&quot;:          &quot;mysql&quot;,\n                    &quot;host&quot;:            env.GetString(&quot;db.host&quot;),\n                    &quot;port&quot;:            env.GetString(&quot;db.port&quot;),\n                    &quot;database&quot;:        env.GetString(&quot;db.database&quot;),\n                    &quot;username&quot;:        env.GetString(&quot;db.username&quot;),\n                    &quot;password&quot;:        env.GetString(&quot;db.password&quot;),\n                    &quot;unix_socket&quot;:     env.GetString(&quot;db.unix_socket&quot;),\n                    &quot;charset&quot;:         env.StringOption(&quot;db.charset&quot;, &quot;utf8mb4&quot;),\n                    &quot;collation&quot;:       env.StringOption(&quot;db.collation&quot;, &quot;utf8mb4_unicode_ci&quot;),\n                    &quot;prefix&quot;:          env.GetString(&quot;db.prefix&quot;),\n                    &quot;strict&quot;:          env.GetBool(&quot;db.struct&quot;),\n                    &quot;max_connections&quot;: env.GetInt(&quot;db.max_connections&quot;),\n                    &quot;max_idles&quot;:       env.GetInt(&quot;db.max_idles&quot;),\n                },\n                &quot;pgsql&quot;: {\n                    &quot;driver&quot;:          &quot;postgres&quot;,\n                    &quot;host&quot;:            env.GetString(&quot;db.pgsql.host&quot;),\n                    &quot;port&quot;:            env.GetString(&quot;db.pgsql.port&quot;),\n                    &quot;database&quot;:        env.GetString(&quot;db.pgsql.database&quot;),\n                    &quot;username&quot;:        env.GetString(&quot;db.pgsql.username&quot;),\n                    &quot;password&quot;:        env.GetString(&quot;db.pgsql.password&quot;),\n                    &quot;charset&quot;:         env.StringOption(&quot;db.pgsql.charset&quot;, &quot;utf8mb4&quot;),\n                    &quot;prefix&quot;:          env.GetString(&quot;db.pgsql.prefix&quot;),\n                    &quot;schema&quot;:          env.StringOption(&quot;db.pgsql.schema&quot;, &quot;public&quot;),\n                    &quot;sslmode&quot;:         env.StringOption(&quot;db.pgsql.sslmode&quot;, &quot;disable&quot;),\n                    &quot;max_connections&quot;: env.GetInt(&quot;db.pgsql.max_connections&quot;),\n                    &quot;max_idles&quot;:       env.GetInt(&quot;db.pgsql.max_idles&quot;),\n                },\n            },\n        }\n    }\n}\n</code></pre>\n<p><code>.env</code> 的数据库相关配置</p>\n<pre><code class=\"language-bash\"># 默认连接\ndb.connection=sqlite\n\nsqlite.database=/Users/qbhy/project/go/goal-web/goal/example/database/db.sqlite\n\ndb.host=localhost\ndb.port=3306\ndb.database=goal\ndb.username=root\ndb.password=password\n\ndb.pgsql.host=localhost\ndb.pgsql.port=55433\ndb.pgsql.database=postgres\ndb.pgsql.username=postgres\ndb.pgsql.password=123456\n</code></pre>\n<h3 id=\"定义模型---define-a-model\">定义模型 - define a model</h3>\n<p><code>app/models/user.go</code> 文件</p>\n<pre><code class=\"language-go\">package models\n\nimport (\n    &quot;github.com/goal-web/database/table&quot;\n    &quot;github.com/goal-web/supports/class&quot;\n)\n\n// UserClass 这个类变量，以后大有用处\nvar UserClass = class.Make(new(User))\n\n// UserModel 返回 table 实例，继承自查询构造器并且实现了所有 future\nfunc UserModel() *table.Table {\n    return table.Model(UserClass, &quot;users&quot;)\n}\n\n// User 模型结构体\ntype User struct {\n    Id       int64  `json:&quot;id&quot;`\n    NickName string `json:&quot;name&quot;`\n}\n</code></pre>\n<h3 id=\"用法---method-of-use\">用法 - method of use</h3>\n<pre><code class=\"language-go\">package tests\n\nimport (\n    &quot;fmt&quot;\n    &quot;github.com/goal-web/contracts&quot;\n    &quot;github.com/goal-web/database/table&quot;\n    &quot;github.com/goal-web/example/models&quot;\n    &quot;github.com/stretchr/testify/assert&quot;\n    &quot;testing&quot;\n)\n\nfunc getQuery(name string) contracts.QueryBuilder {\n    // 测试用例环境下的简易 goal 应用启动\n    app := initApp(&quot;/Users/qbhy/project/go/goal-web/goal/tests&quot;)\n\n    //return  table.Query(&quot;users&quot;) 返回 table 实例，使用默认连接\n    //tx, _ := app.Get(&quot;db&quot;).(contracts.DBConnection).Begin()\n    //return table.WithTX(&quot;users&quot;, tx) // 事物环境下执行\n\n    //return table.WithConnection(name, &quot;sqlite&quot;) // 返回指定连接的 table 实例，使用连接名\n    return table.WithConnection(name, app.Get(&quot;db&quot;).(contracts.DBConnection)) // 也可以指定连接实例\n}\n\n// TestTableQuery 测试不带模型的 table 查询，类似 laravel 的 DB::table()\nfunc TestTableQuery(t *testing.T) {\n\n    getQuery(&quot;users&quot;).Delete()\n\n    // 不设置模型的情况下，返回 contracts.Fields\n    user := getQuery(&quot;users&quot;).Create(contracts.Fields{\n        &quot;name&quot;: &quot;qbhy&quot;,\n    }).(contracts.Fields)\n\n    fmt.Println(user)\n    userId := user[&quot;id&quot;].(int64)\n    // 判断插入是否成功\n    assert.True(t, userId &gt; 0)\n\n    // 获取数据总量\n    assert.True(t, getQuery(&quot;users&quot;).Count() == 1)\n\n    // 修改数据\n    num := getQuery(&quot;users&quot;).Where(&quot;name&quot;, &quot;qbhy&quot;).Update(contracts.Fields{\n        &quot;name&quot;: &quot;goal&quot;,\n    })\n    assert.True(t, num == 1)\n    // 判断修改后的数据\n    user = getQuery(&quot;users&quot;).Where(&quot;name&quot;, &quot;goal&quot;).First().(contracts.Fields)\n\n    err := getQuery(&quot;users&quot;).Chunk(10, func(collection contracts.Collection, page int) error {\n        assert.True(t, collection.Len() == 1)\n        fmt.Println(collection.ToJson())\n        return nil\n    })\n\n    assert.Nil(t, err)\n\n    assert.True(t, user[&quot;id&quot;] == userId)\n    assert.True(t, user[&quot;name&quot;] == &quot;goal&quot;)\n    assert.True(t, getQuery(&quot;users&quot;).Find(userId).(contracts.Fields)[&quot;id&quot;] == userId)\n    assert.True(t, getQuery(&quot;users&quot;).Where(&quot;id&quot;, userId).Delete() == 1)\n    assert.Nil(t, getQuery(&quot;users&quot;).Find(userId))\n}\n\nfunc TestModel(t *testing.T) {\n    initApp(&quot;/Users/qbhy/project/go/goal-web/goal/tests&quot;)\n\n    fmt.Println(&quot;用table查询：&quot;,\n        getQuery(&quot;users&quot;).Get().Map(func(user contracts.Fields) {\n            fmt.Println(&quot;用table查询&quot;, user)\n        }).ToJson()) // query 返回 Collection&lt;contracts.Fields&gt;\n\n    user := models.UserModel().Create(contracts.Fields{\n        &quot;name&quot;: &quot;qbhy&quot;,\n    }).(models.User)\n\n    fmt.Println(&quot;创建后返回模型&quot;, user)\n\n    fmt.Println(&quot;用table查询：&quot;,\n        getQuery(&quot;users&quot;).Get().Map(func(user contracts.Fields) {\n            fmt.Println(&quot;用table查询&quot;, user)\n        }).ToJson()) // query 返回 Collection&lt;contracts.Fields&gt;\n\n        // 用模型查询\n    fmt.Println(models.UserModel(). // model 返回 Collection&lt;models.User&gt;\n                    Get().\n                    Map(func(user models.User) {\n            fmt.Println(&quot;id:&quot;, user.Id)\n        }).ToJson())\n\n    fmt.Println(models.UserModel().Where(&quot;id&quot;, &quot;&gt;&quot;, 0).Delete())\n}\n</code></pre>\n<blockquote>\n<p>更多查询构造器用法请移步 <a href=\"https://github.com/goal-web/querybuilder\">goal-web/querybuilder</a></p>\n</blockquote>\n<h3 id=\"在-goal-之外的框架使用---use-in-frameworks-other-than-goal\">在 goal 之外的框架使用 - use in frameworks other than goal</h3>\n<pre><code class=\"language-golang\">// TestMysqlDatabaseWithoutApplication 只需要给给 table 包设置一个可用的 contracts.DBFactory 即可正常使用 table 下面的数据库操作方法\nfunc TestMysqlDatabaseWithoutApplication(t *testing.T) {\n    table.SetFactory(database.NewFactory(database.Config{\n        Default: &quot;mysql&quot;,\n        Connections: map[string]contracts.Fields{\n            &quot;mysql&quot;: {\n                &quot;driver&quot;:    &quot;mysql&quot;,\n                &quot;host&quot;:      &quot;localhost&quot;,\n                &quot;port&quot;:      &quot;3306&quot;,\n                &quot;database&quot;:  &quot;goal&quot;,\n                &quot;username&quot;:  &quot;root&quot;,\n                &quot;password&quot;:  &quot;123456&quot;,\n                &quot;charset&quot;:   &quot;utf8mb4&quot;,\n                &quot;collation&quot;: &quot;utf8mb4_unicode_ci&quot;,\n            },\n        },\n    }, nil))\n\n    assert.True(t, table.Query(&quot;users&quot;).Count() == 0)\n\n    user := table.Query(&quot;users&quot;).Create(contracts.Fields{\n        &quot;name&quot;: &quot;testing&quot;,\n    })\n    assert.NotNil(t, user)\n    assert.True(t, user.(contracts.Fields)[&quot;name&quot;] == &quot;testing&quot;)\n    assert.True(t, table.Query(&quot;users&quot;).Count() == 1)\n    table.Query(&quot;users&quot;).Where(&quot;name&quot;, &quot;testing&quot;).Delete()\n    assert.True(t, table.Query(&quot;users&quot;).Count() == 0)\n}\n</code></pre>\n<p><a href=\"https://github.com/goal-web/goal\">goal-web</a><br><a href=\"https://github.com/goal-web/database\">goal-web/database</a><br><a href=\"mailto:&#x71;&#x62;&#104;&#x79;&#x30;&#x37;&#x31;&#x35;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;\">&#x71;&#x62;&#104;&#x79;&#x30;&#x37;&#x31;&#x35;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a></p>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
                   "golang数据库工具",
                   "goal组件"
            ],
            "date_published": "2022-04-08T11:28:14+08:00",
            "date_modified": "2023-01-31T23:09:30+08:00"
        },
        {
            "id": "https://goal-web.com/querybuilder-cha-xun-gou-zao-qi-zu-jian.html",
            "url": "https://goal-web.com/querybuilder-cha-xun-gou-zao-qi-zu-jian.html",
            "title": "QueryBuilder - 查询构造器组件",
            "summary": "Goal/QueryBuilder Goal 的数据库查询构造器为创建和运行数据库查询提供了一个方便的接口。它可以用于支持大部分数据库操作，并与 Goal 支持的所有数据库系统完美运行。并且大量参考了 Laravel 的查询构造器设计，你几乎可以在这个库找到所有与 Laravel 对应的方法。 Goal 的查询构造器实现了类似 PDO 参数绑定的形式，来保护您的应用程序免受 SQL 注入攻击。因此不必清理因参数绑定而传入的字符串。查询构造器会返回你想要的 SQL 语句以及绑定参数。 $ go get github.com/goal-web/querybuilder 运行数据库查询 - usage 根据条件从表中检索出数据 - query 你可以使用 NewQuery 方法来开始查询。该方法为给定的表返回一个查询构造器实例，允许你在查询上链式调用更多的约束，最后使用 get 方法获取结果： package querybuilder import ( &quot;fmt&quot; ) func TestSimpleQueryBuilder() { query := NewQuery(&quot;users&quot;). Where(&quot;name&quot;,&hellip;",
            "content_html": "<h1 id=\"goalquerybuilder\">Goal/QueryBuilder</h1>\n<p>Goal 的数据库查询构造器为创建和运行数据库查询提供了一个方便的接口。它可以用于支持大部分数据库操作，并与 Goal 支持的所有数据库系统完美运行。并且大量参考了 <code>Laravel</code> 的查询构造器设计，你几乎可以在这个库找到所有与 <code>Laravel</code> 对应的方法。</p>\n<p>Goal 的查询构造器实现了类似 PDO 参数绑定的形式，来保护您的应用程序免受 SQL 注入攻击。因此不必清理因参数绑定而传入的字符串。查询构造器会返回你想要的 SQL 语句以及绑定参数。</p>\n<h2 id=\"安装---install\">安装 - install</h2>\n<pre><code class=\"language-bash\">$ go get github.com/goal-web/querybuilder\n</code></pre>\n<h2 id=\"运行数据库查询---usage\">运行数据库查询 - usage</h2>\n<h3 id=\"根据条件从表中检索出数据---query\">根据条件从表中检索出数据 - query</h3>\n<p>你可以使用 <code>NewQuery</code> 方法来开始查询。该方法为给定的表返回一个查询构造器实例，允许你在查询上链式调用更多的约束，最后使用 get 方法获取结果：</p>\n<pre><code class=\"language-golang\">package querybuilder\nimport (\n    &quot;fmt&quot;\n)\n\nfunc TestSimpleQueryBuilder() {\n    query := NewQuery(&quot;users&quot;).\n        Where(&quot;name&quot;, &quot;qbhy&quot;).\n        Where(&quot;age&quot;, &quot;&gt;&quot;, 18).\n        Where(&quot;gender&quot;, &quot;!=&quot;, 0).\n        OrWhere(&quot;amount&quot;, &quot;&gt;=&quot;, 100).\n        WhereIsNull(&quot;avatar&quot;)\n    \n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    // select * from users where name = ? and age &gt; ? and gender != ? and avatar is null or amount &gt;= ?\n    // [qbhy 18 0 100]\n}\n</code></pre>\n<blockquote>\n<p>你也可以通过 <code>SelectSql</code> 方法一次性获取你想要的参数。\n例如：sql, bindings := NewQuery(“users”).Where(“gender”, 1).SelectSql()</p>\n</blockquote>\n<h3 id=\"插入语句---insert\">插入语句 - insert</h3>\n<p>你可以通过 <code>InsertSql</code> 或者 <code>CreateSql</code> 很方便的生成插入语句。</p>\n<pre><code class=\"language-golang\">package querybuilder\n\nimport (\n    &quot;fmt&quot;\n    &quot;github.com/goal-web/contracts&quot;\n)\n\n// TestInsertSql 批量插入数据\nfunc TestInsertSql() {\n    sql, bindings := NewQuery(&quot;users&quot;).InsertSql([]contracts.Fields{\n        {&quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000},\n        {&quot;name&quot;: &quot;goal&quot;, &quot;age&quot;: 18, &quot;money&quot;: 10},\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    // insert into users (name,age,money) values (?,?,?),(?,?,?)\n    // [qbhy 18 100000000000 goal 18 10]\n}\n// TestCreateSql 插入单个数据\nfunc TestCreateSql() {\n    sql, bindings := NewQuery(&quot;users&quot;).CreateSql(contracts.Fields{\n        &quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000,\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings) \n    // insert into users (name,age,money) values (?,?,?) \n    //[qbhy 18 100000000000]\n}\n</code></pre>\n<h3 id=\"更新语句\">更新语句</h3>\n<p>你可以通过 <code>UpdateSql</code> 很方便的生成更新语句。</p>\n<pre><code class=\"language-golang\">package querybuilder\n\nimport (\n    &quot;fmt&quot;\n    &quot;github.com/goal-web/contracts&quot;\n)\n\nfunc TestUpdateSql() {\n    sql, bindings := NewQuery(&quot;users&quot;).Where(&quot;id&quot;, &quot;&gt;&quot;, 1).UpdateSql(contracts.Fields{\n        &quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000,\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    // update users set money = ?,name = ?,age = ? where id &gt; ?\n    // [qbhy 18 100000000000 1]\n}\n</code></pre>\n<h3 id=\"删除语句---delete\">删除语句 - delete</h3>\n<p>你可以通过 <code>DeleteSql</code> 很方便的生成删除语句。</p>\n<pre><code class=\"language-golang\">package querybuilder\n\nimport (\n    &quot;fmt&quot;\n)\n\nfunc TestDeleteSql() {\n    sql, bindings := NewQuery(&quot;users&quot;).Where(&quot;id&quot;, &quot;&gt;&quot;, 1).DeleteSql()\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    // delete from users where id &gt; ?\n    // [1]\n}\n</code></pre>\n<h2 id=\"更多高级用法---more\">更多高级用法 - more</h2>\n<p>支持 where嵌套、子查询、连表、连子查询等更多高级用法</p>\n<pre><code class=\"language-go\">package tests\n\nimport (\n    &quot;fmt&quot;\n    &quot;github.com/goal-web/contracts&quot;\n    builder &quot;github.com/goal-web/querybuilder&quot;\n    &quot;github.com/stretchr/testify/assert&quot;\n    &quot;github.com/xwb1989/sqlparser&quot;\n    &quot;testing&quot;\n)\n\nfunc TestSimpleQueryBuilder(t *testing.T) {\n    query := builder.NewQuery(&quot;users&quot;)\n    query.Where(&quot;name&quot;, &quot;qbhy&quot;).\n        Where(&quot;age&quot;, &quot;&gt;&quot;, 18).\n        Where(&quot;gender&quot;, &quot;!=&quot;, 0, contracts.Or).\n        OrWhere(&quot;amount&quot;, &quot;&gt;=&quot;, 100).\n        WhereIsNull(&quot;avatar&quot;)\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestJoinQueryBuilder(t *testing.T) {\n    query := builder.NewQuery(&quot;users&quot;).\n        Join(&quot;accounts&quot;, &quot;accounts.user_id&quot;, &quot;=&quot;, &quot;users.id&quot;).\n        JoinSub(func() contracts.QueryBuilder {\n            return builder.NewQuery(&quot;users&quot;).\n                Where(&quot;level&quot;, &quot;&gt;&quot;, 5)\n        }, &quot;vip_users&quot;, &quot;vip_users.id&quot;, &quot;=&quot;, &quot;users.id&quot;).\n        //WhereIn(&quot;gender&quot;, &quot;1,2&quot;).\n        WhereIn(&quot;gender&quot;, []int{1, 2})\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestFromSubQueryBuilder(t *testing.T) {\n    query := builder.FromSub(func() contracts.QueryBuilder {\n        return builder.NewQuery(&quot;users&quot;).\n            Where(&quot;level&quot;, &quot;&gt;&quot;, 5)\n    }, &quot;vip_users&quot;).\n        //WhereIn(&quot;gender&quot;, &quot;1,2&quot;).\n        WhereIn(&quot;gender&quot;, []int{1, 2})\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestDistinctQueryBuilder(t *testing.T) {\n    query := builder.NewQuery(&quot;users&quot;).\n        Distinct().\n        Join(&quot;accounts&quot;, &quot;accounts.user_id&quot;, &quot;=&quot;, &quot;users.id&quot;).\n        Where(&quot;gender&quot;, &quot;!=&quot;, 0, contracts.Or)\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestUpdateSql(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).Where(&quot;id&quot;, &quot;&gt;&quot;, 1).UpdateSql(contracts.Fields{\n        &quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000,\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestSelectSub(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).Where(&quot;id&quot;, &quot;&gt;&quot;, 1).\n        SelectSub(func() contracts.QueryBuilder {\n            return builder.NewQuery(&quot;accounts&quot;).Where(&quot;accounts.id&quot;, &quot;users.id&quot;).WithCount()\n        }, &quot;accounts_count&quot;).\n        Join(&quot;accounts&quot;, &quot;accounts.user_id&quot;, &quot;=&quot;, &quot;users.id&quot;).\n        SelectSql()\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestWhereNotExists(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).\n        Where(&quot;id&quot;, &quot;&gt;&quot;, 1).\n        WhereNotExists(func() contracts.QueryBuilder {\n            return builder.NewQuery(&quot;users&quot;).Select(&quot;id&quot;).Where(&quot;age&quot;, &quot;&gt;&quot;, 18)\n        }).\n        SelectSql()\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestCount(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).Where(&quot;id&quot;, &quot;&gt;&quot;, 1).WithCount(&quot;id&quot;).SelectSql()\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestDeleteSql(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).Where(&quot;id&quot;, &quot;&gt;&quot;, 1).DeleteSql()\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestInsertSql(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).InsertSql([]contracts.Fields{\n        {&quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000},\n        {&quot;name&quot;: &quot;goal&quot;, &quot;age&quot;: 18, &quot;money&quot;: 10},\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestInsertIgnoreSql(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).InsertIgnoreSql([]contracts.Fields{\n        {&quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000},\n        {&quot;name&quot;: &quot;goal&quot;, &quot;age&quot;: 18, &quot;money&quot;: 10},\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\nfunc TestInsertReplaceSql(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).InsertReplaceSql([]contracts.Fields{\n        {&quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000},\n        {&quot;name&quot;: &quot;goal&quot;, &quot;age&quot;: 18, &quot;money&quot;: 10},\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\n\nfunc TestCreateSql(t *testing.T) {\n    sql, bindings := builder.NewQuery(&quot;users&quot;).CreateSql(contracts.Fields{\n        &quot;name&quot;: &quot;qbhy&quot;, &quot;age&quot;: 18, &quot;money&quot;: 100000000000,\n    })\n    fmt.Println(sql)\n    fmt.Println(bindings)\n    _, err := sqlparser.Parse(sql)\n    assert.Nil(t, err, err)\n}\n\nfunc TestBetweenQueryBuilder(t *testing.T) {\n    query := builder.NewQuery(&quot;users&quot;).\n        Join(&quot;accounts&quot;, &quot;accounts.user_id&quot;, &quot;=&quot;, &quot;users.id&quot;).\n        WhereFunc(func(b contracts.QueryBuilder) {\n            // 高瘦\n            b.WhereBetween(&quot;height&quot;, []int{180, 200}).\n                WhereBetween(&quot;weight&quot;, []int{50, 60}).\n                WhereIn(&quot;id&quot;, []int{1, 2, 3, 4, 5})\n        }).OrWhereFunc(func(b contracts.QueryBuilder) {\n        // 矮胖\n        b.WhereBetween(&quot;height&quot;, []int{140, 160}).\n            WhereBetween(&quot;weight&quot;, []int{70, 140}).\n            WhereNotBetween(&quot;id&quot;, []int{1, 5})\n    })\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestUnionQueryBuilder(t *testing.T) {\n    query := builder.NewQuery(&quot;users&quot;).\n        Join(&quot;accounts&quot;, &quot;accounts.user_id&quot;, &quot;=&quot;, &quot;users.id&quot;).\n        Where(&quot;gender&quot;, &quot;!=&quot;, 0, contracts.Or).\n        UnionByProvider(\n            func() contracts.QueryBuilder {\n                return builder.NewQuery(&quot;peoples&quot;).Where(&quot;id&quot;, 5)\n            },\n        ).\n        Union(\n            builder.NewQuery(&quot;accounts&quot;),\n        ).\n        UnionAll(\n            builder.NewQuery(&quot;members&quot;),\n        ).\n        UnionAll(\n            builder.NewQuery(&quot;students&quot;),\n        )\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestComplexQueryBuilder(t *testing.T) {\n\n    query := builder.NewQuery(&quot;users&quot;)\n    query.\n        FromSub(func() contracts.QueryBuilder {\n            return builder.NewQuery(&quot;users&quot;).Where(&quot;amount&quot;, &quot;&gt;&quot;, 1000)\n        }, &quot;rich_users&quot;).\n        Join(&quot;accounts&quot;, &quot;users.id&quot;, &quot;=&quot;, &quot;accounts.user_id&quot;).\n        WhereFunc(func(b contracts.QueryBuilder) {\n            b.Where(&quot;name&quot;, &quot;goal&quot;).\n                Where(&quot;age&quot;, &quot;&lt;&quot;, &quot;18&quot;).\n                WhereIn(&quot;id&quot;, []int{1, 2})\n        }).\n        OrWhereFunc(func(b contracts.QueryBuilder) {\n            b.Where(&quot;name&quot;, &quot;qbhy&quot;).\n                Where(&quot;age&quot;, &quot;&gt;&quot;, 18).\n                WhereNotIn(&quot;id&quot;, []int{1, 2})\n        }).\n        OrWhereNotIn(&quot;id&quot;, []int{6, 7}).\n        OrWhereNotNull(&quot;id&quot;).\n        OrderByDesc(&quot;age&quot;).\n        OrderBy(&quot;id&quot;).\n        GroupBy(&quot;country&quot;)\n\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n\nfunc TestGroupByQueryBuilder(t *testing.T) {\n\n    query := builder.\n        FromSub(func() contracts.QueryBuilder {\n            return builder.NewQuery(&quot;users&quot;).Where(&quot;amount&quot;, &quot;&gt;&quot;, 1000)\n        }, &quot;rich_users&quot;).\n        GroupBy(&quot;country&quot;).\n        Having(&quot;count(rich_users.id)&quot;, &quot;&lt;&quot;, 1000).   // 人口少\n        OrHaving(&quot;sum(rich_users.amount)&quot;, &quot;&lt;&quot;, 100) // 或者穷\n\n    fmt.Println(query.ToSql())\n    fmt.Println(query.GetBindings())\n    _, err := sqlparser.Parse(query.ToSql())\n    assert.Nil(t, err, err)\n}\n</code></pre>\n<p>正如开头所说，你可以在这里找到几乎所有与 <code>Laravel</code> 对应的查询构造器方法，也可以在 <a href=\"https://github.com/goal-web/querybuilder/blob/master/database_test.go\">测试文件</a> 中找到更多用法</p>\n<p><a href=\"https://github.com/goal-web/querybuilder\">goal/query-builder</a><br><a href=\"mailto:&#113;&#98;&#104;&#121;&#48;&#x37;&#x31;&#53;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;\">&#113;&#98;&#104;&#121;&#48;&#x37;&#x31;&#53;&#64;&#x71;&#113;&#46;&#99;&#111;&#x6d;</a></p>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
                   "goal组件"
            ],
            "date_published": "2022-03-11T00:12:46+08:00",
            "date_modified": "2022-03-11T00:12:54+08:00"
        },
        {
            "id": "https://goal-web.com/auth-zu-jian.html",
            "url": "https://goal-web.com/auth-zu-jian.html",
            "title": "Auth 组件",
            "summary": "Goal-web/auth goal-web/auth goal 框架的用户认证组件，你可以在 http、websocket 或者其他环境使用。 $ go get github.com/goal-web/auth 使用 - usage goal 的脚手架自带了绝大多数开发一个 web 应用的所需要的功能和组件，当然这也包括了认证组件。一般情况下，我们只需要在 .env 修改自己的认证配置即可，比如 jwt 驱动的 secret、session 驱动的 session_key。 默认情况下，config/auth.go 配置文件像下面那样，默认添加了 jwt、session 两个守卫配置 package config import ( &quot;github.com/goal-web/auth&quot; &quot;github.com/goal-web/contracts&quot; &quot;github.com/goal-web/example/models&quot; &quot;github.com/golang-jwt/jwt&quot; ) func init() { configs[&quot;auth&quot;] = func(env contracts.Env) interface{}&hellip;",
            "content_html": "<h1 id=\"goal-webauth\">Goal-web/auth</h1>\n<p><a href=\"https://github.com/goal-web/auth\">goal-web/auth</a><br>goal 框架的用户认证组件，你可以在 <code>http</code>、<code>websocket</code> 或者其他环境使用。</p>\n<h2 id=\"安装---install\">安装 - install</h2>\n<pre><code class=\"language-bash\">$ go get github.com/goal-web/auth\n</code></pre>\n<h2 id=\"使用---usage\">使用 - usage</h2>\n<p>goal 的脚手架自带了绝大多数开发一个 web 应用的所需要的功能和组件，当然这也包括了认证组件。一般情况下，我们只需要在 .env 修改自己的认证配置即可，比如 <code>jwt</code> 驱动的 secret、<code>session</code> 驱动的 session_key。</p>\n<h3 id=\"配置---config\">配置 - config</h3>\n<p>默认情况下，<code>config/auth.go</code> 配置文件像下面那样，默认添加了 <code>jwt</code>、<code>session</code> 两个守卫配置</p>\n<pre><code class=\"language-go\">package config\n\nimport (\n    &quot;github.com/goal-web/auth&quot;\n    &quot;github.com/goal-web/contracts&quot;\n    &quot;github.com/goal-web/example/models&quot;\n    &quot;github.com/golang-jwt/jwt&quot;\n)\n\nfunc init() {\n    configs[&quot;auth&quot;] = func(env contracts.Env) interface{} {\n        return auth.Config{\n            Defaults: struct {\n                Guard string\n                User  string\n            }{\n                Guard: env.StringOption(&quot;auth.default&quot;, &quot;jwt&quot;), // 默认守卫\n                User:  env.StringOption(&quot;auth.user&quot;, &quot;db&quot;), // 默认用户提供者\n            },\n            Guards: map[string]contracts.Fields{\n                &quot;jwt&quot;: { // 守卫名称\n                    &quot;driver&quot;:   &quot;jwt&quot;, // 驱动,目前支持jwt、session\n                    &quot;secret&quot;:   env.GetString(&quot;auth.jwt.secret&quot;), // jwt 签名所需的 secret，不同的守卫建议不同的secret\n                    &quot;method&quot;:   jwt.SigningMethodHS256, // jwt 签名方法\n                    &quot;lifetime&quot;: 60 * 60 * 24, // token有效时长，单位：秒\n                    &quot;provider&quot;: &quot;db&quot;, // 用户提供者名\n                },\n                &quot;session&quot;: { // 守卫名称\n                    &quot;driver&quot;:      &quot;session&quot;, // 驱动名\n                    &quot;provider&quot;:    &quot;db&quot;, // 用户提供者名\n                    // session驱动所需的参数，如果应用需要配置多个session驱动的守卫，那么需要配置不一样的 session_key\n                    &quot;session_key&quot;: env.StringOption(&quot;auth.session.key&quot;, &quot;auth_session&quot;), \n                },\n            },\n            Users: map[string]contracts.Fields{ // 用户提供者，目前只支持 db\n                &quot;db&quot;: { // 用户提供者名称\n                    &quot;driver&quot;: &quot;db&quot;, // 驱动名称\n                    &quot;model&quot;:  models.UserModel, // 用户模型\n                },\n            },\n        }\n    }\n}\n</code></pre>\n<p><code>.env</code> 的数据库相关配置</p>\n<pre><code class=\"language-bash\">auth.jwt.secret=jwt_secret\nauth.default=jwt\n</code></pre>\n<h3 id=\"定义模型---define-a-model\">定义模型 - define a model</h3>\n<p><code>app/models/user.go</code> 文件</p>\n<pre><code class=\"language-go\">package models\n\nimport (\n    &quot;github.com/goal-web/database/table&quot;\n    &quot;github.com/goal-web/supports/class&quot;\n)\n\nvar (\n    UserModel = table.NewModel(class.Make(new(User)), &quot;users&quot;)\n)\n\nfunc UserQuery() *table.Table {\n    return table.FromModel(UserModel)\n}\n\ntype User struct {\n    Id       string `json:&quot;id&quot;`\n    NickName string `json:&quot;name&quot;`\n}\n\n// GetId 实现了 contracts.Authenticatable 接口，此方法必不可少\nfunc (u User) GetId() string {\n    return u.Id\n}\n</code></pre>\n<h3 id=\"用法---method-of-use\">用法 - method of use</h3>\n<pre><code class=\"language-go\">package controllers\n\nimport (\n    &quot;github.com/goal-web/contracts&quot;\n    &quot;github.com/goal-web/example/models&quot;\n)\n\nfunc LoginExample(guard contracts.Guard) contracts.Fields {\n    //  这是伪代码\n    user := models.UserQuery().First().(models.User)\n\n    return contracts.Fields{\n        &quot;token&quot;: guard.Login(user), // jwt 返回 token，session 返回 true\n    }\n}\n\nfunc GetCurrentUser(guard contracts.Guard) interface{} {\n    return contracts.Fields{\n        &quot;user&quot;: guard.User(), // 已登录返回用户模型，否则返回 nil\n    }\n}\n</code></pre>\n<h3 id=\"使用中间件\">使用中间件</h3>\n<pre><code class=\"language-go\">package routes\n\nimport (\n    &quot;github.com/goal-web/auth&quot;\n    &quot;github.com/goal-web/contracts&quot;\n    &quot;github.com/goal-web/example/app/http/controllers&quot;\n    &quot;github.com/goal-web/session&quot;\n)\n\nfunc ApiRoutes(router contracts.Router) {\n    \n    v1 := router.Group(&quot;&quot;, session.StartSession)\n    \n    // 直接应用在路由上\n    v1.Get(&quot;/myself&quot;, controllers.GetCurrentUser, auth.Guard(&quot;jwt&quot;))\n    \n    // 应用在路由组上\n    authRouter := v1.Group(&quot;&quot;, auth.Guard(&quot;jwt&quot;))\n    authRouter.Get(&quot;/myself&quot;, controllers.GetCurrentUser, auth.Guard(&quot;jwt&quot;))\n\n}\n</code></pre>\n<h3 id=\"守卫api---guard-api\">守卫API - guard api</h3>\n<pre><code class=\"language-go\">type Guard interface {\n    Once(user Authenticatable)\n    User() Authenticatable\n    GetId() string\n    Check() bool\n    Guest() bool\n    Login(user Authenticatable) interface{}\n}\n</code></pre>\n<h3 id=\"扩展守卫和用户提供者---extension\">扩展守卫和用户提供者 - extension</h3>\n<p>这部分内容比较多，这里暂时不展开讲，后面会专门录视频介绍，欢迎大家点赞订阅</p>\n<h3 id=\"在-goal-之外的框架使用---use-in-frameworks-other-than-goal\">在 goal 之外的框架使用 - use in frameworks other than goal</h3>\n<p>这部分内容比较多，这里暂时不展开讲，后面会专门录视频介绍，欢迎大家点赞订阅</p>\n<p><a href=\"https://github.com/goal-web/goal\">goal-web</a><br><a href=\"https://github.com/goal-web/auth\">goal-web/auth</a><br><a href=\"mailto:&#x71;&#x62;&#104;&#x79;&#x30;&#55;&#49;&#53;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;\">&#x71;&#x62;&#104;&#x79;&#x30;&#55;&#49;&#53;&#64;&#x71;&#113;&#46;&#99;&#111;&#109;</a></p>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
                   "goal组件"
            ],
            "date_published": "2022-03-10T23:59:16+08:00",
            "date_modified": "2022-03-11T00:00:46+08:00"
        },
        {
            "id": "https://goal-web.com/goal-ying-yong-mu-lu-jie-gou.html",
            "url": "https://goal-web.com/goal-ying-yong-mu-lu-jie-gou.html",
            "title": "Goal 应用目录结构",
            "summary": "app 应用代码 console 控制台相关代码 commands 定义命令行 kernel.go 默认 console 内核实现，可以在这里定义计划任务 dao 数据操作代码 events 事件定义 listeners 事件监听者 jobs 任务代码，用于投递到 queue http web相关代码 controllers 控制器目录 middlewares 中间件目录 requests 自定义请求目录 sse 服务端事件推送相关代码及示例 models 数据模型定义 policies gate策略定义 services 微服务相关代码 providers 一些应用内的服务提供者 app.go 一些基本的应用初始化代码 gate.go 用于注册gate策略 micro.go 用于注册微服务 websocket ws相关代码和示例config&hellip;",
            "content_html": "<h2 id=\"app-应用代码\">app 应用代码</h2>\n<ul>\n<li>console 控制台相关代码<ul>\n<li>commands 定义命令行</li>\n<li>kernel.go 默认 console 内核实现，可以在这里定义计划任务</li>\n</ul>\n</li>\n<li>dao 数据操作代码</li>\n<li>events 事件定义</li>\n<li>listeners 事件监听者</li>\n<li>jobs 任务代码，用于投递到 queue</li>\n<li>http web相关代码<ul>\n<li>controllers 控制器目录</li>\n<li>middlewares 中间件目录</li>\n<li>requests 自定义请求目录</li>\n<li>sse 服务端事件推送相关代码及示例</li>\n</ul>\n</li>\n<li>models 数据模型定义</li>\n<li>policies gate策略定义</li>\n<li>services 微服务相关代码</li>\n<li>providers 一些应用内的服务提供者<ul>\n<li>app.go 一些基本的应用初始化代码</li>\n<li>gate.go 用于注册gate策略</li>\n<li>micro.go 用于注册微服务</li>\n</ul>\n</li>\n<li>websocket ws相关代码和示例<h2 id=\"config-配置文件\">config 配置文件</h2>\n</li>\n<li>app.go 应用配置</li>\n<li>auth.go 用户认证配置</li>\n<li>database.go 数据库配置</li>\n<li>bloomfilter.go 布隆过滤器配置</li>\n<li>cache.go 缓存配置</li>\n<li>http.go http配置</li>\n<li>mail.go 邮件配置</li>\n<li>queue.go 队列配置</li>\n<li>session.go 会话配置</li>\n<li>micro.go 微服务配置</li>\n<li>filesystem.go 文件系统配置</li>\n<li>redis.go redis配置</li>\n<li>serialization.go 序列化器配置(job需要在此文件配置)</li>\n<li>websocket.go ws 配置<h2 id=\"routes-路由文件\">routes 路由文件</h2>\n</li>\n<li>api.go http路由</li>\n<li>websocket.go ws 路由</li>\n<li>sse.go 服务端事件推送路由<h2 id=\"database-数据库相关\">database 数据库相关</h2>\n<h2 id=\"tests-测试代码\">tests 测试代码</h2>\n<h2 id=\"storage-存储目录\">storage 存储目录</h2>\n</li>\n</ul>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
            ],
            "date_published": "2022-03-09T10:53:49+08:00",
            "date_modified": "2022-03-09T10:54:48+08:00"
        },
        {
            "id": "https://goal-web.com/goal-kuai-su-kai-shi.html",
            "url": "https://goal-web.com/goal-kuai-su-kai-shi.html",
            "title": "Goal - 快速开始",
            "summary": "要求 - requirements go 1.17+ make (可选) 下载 - download $ git clone https://github.com/goal-web/goal &amp;&amp; cd goal 启动 - start $ make run # or $ go mod tidy &amp;&amp; go run main.go run goal 程序编译后运行方式是 ./goal run ，run 只是一个定义好的 goal cli 命令 $ curl&hellip;",
            "content_html": "<h2 id=\"要求---requirements\">要求 - requirements</h2>\n<ul>\n<li>go 1.17+</li>\n<li>make (可选)</li>\n</ul>\n<h2 id=\"下载---download\">下载 - download</h2>\n<pre><code class=\"language-sh\">$ git clone https://github.com/goal-web/goal &amp;&amp; cd goal\n</code></pre>\n<h2 id=\"启动---start\">启动 - start</h2>\n<pre><code class=\"language-sh\">$ make run\n# or\n$ go mod tidy &amp;&amp; go run main.go run\n</code></pre>\n<blockquote>\n<p>goal 程序编译后运行方式是 ./goal run ，run 只是一个定义好的 goal cli 命令</p>\n</blockquote>\n<h2 id=\"访问---visit\">访问 - visit</h2>\n<pre><code class=\"language-sh\">$ curl localhost:8008\n</code></pre>\n<blockquote>\n<p>hello, goal.</p>\n</blockquote>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
            ],
            "date_published": "2022-03-09T10:42:37+08:00",
            "date_modified": "2022-03-09T10:43:24+08:00"
        },
        {
            "id": "https://goal-web.com/goal-features.html",
            "url": "https://goal-web.com/goal-features.html",
            "title": "Goal 组件",
            "summary": "核心组件 鉴于部分朋友看到 goal 长长的组件列表后，认为 goal 是个重型框架，许多场景不适合使用。我认为有必要说明一下，goal 的组件搭配其实是相当灵活的，goal 除了核心组件之外的其他组件都是可选的，包括所有主要组件。goal 允许你自由组装你的 goal 应用，例如 console + database 可以写一个数据库迁移应用，console + email 可以写一个邮件发送工具，http + database 可以写一个 CURD 应用，以此类推，你可以通过各种组合来完善你的应用，同时 goal 也提供了一个默认的 goal 应用模板 contracts - 契约 container - 容器 application - 应用 config - 配置 supports - 各种支持库和工具库 主要组件 pipeline -&hellip;",
            "content_html": "<h2 id=\"核心组件\">核心组件</h2>\n<p>鉴于部分朋友看到 goal 长长的组件列表后，认为 goal 是个重型框架，许多场景不适合使用。我认为有必要说明一下，goal 的组件搭配其实是相当灵活的，goal 除了核心组件之外的其他组件都是可选的，包括所有主要组件。goal 允许你自由组装你的 goal 应用，例如 console + database 可以写一个数据库迁移应用，console + email 可以写一个邮件发送工具，http + database 可以写一个 CURD 应用，以此类推，你可以通过各种组合来完善你的应用，同时 goal 也提供了一个默认的 <a href=\"https://github.com/goal-web/goal\">goal 应用模板</a></p>\n<ul>\n<li><a href=\"https://github.com/goal-web/contracts\">contracts - 契约</a></li>\n<li><a href=\"https://github.com/goal-web/container\">container - 容器</a></li>\n<li><a href=\"https://github.com/goal-web/application\">application - 应用</a></li>\n<li><a href=\"https://github.com/goal-web/application\">config - 配置</a></li>\n<li><a href=\"https://github.com/goal-web/supports\">supports - 各种支持库和工具库</a></li>\n</ul>\n<h2 id=\"主要组件\">主要组件</h2>\n<ul>\n<li><a href=\"https://github.com/goal-web/pipeline\">pipeline - 洋葱模型管道</a></li>\n<li><a href=\"https://github.com/goal-web/collection\">collection - 集合操作</a></li>\n<li><a href=\"https://github.com/goal-web/hashing\">hashing - 哈希库</a></li>\n<li><a href=\"https://github.com/goal-web/ratelimiter\">ratelimiter - 限流器</a></li>\n<li><a href=\"https://github.com/goal-web/bloomfilter\">bloomfilter - 布隆过滤器，支持文件和redis</a></li>\n<li><a href=\"https://github.com/goal-web/encryption\">encryption - 加密库</a></li>\n<li><a href=\"https://github.com/goal-web/serialization\">serialization - 序列化库</a></li>\n<li><a href=\"https://github.com/goal-web/console\">console - 控制台库，支持计划任务、自定义命令</a></li>\n<li><a href=\"https://github.com/goal-web/redis\">redis</a></li>\n<li><a href=\"https://github.com/goal-web/cache\">cache - 缓存</a></li>\n<li><a href=\"https://github.com/goal-web/querybuilder\">querybuilder - sql查询构造器</a></li>\n<li><a href=\"https://github.com/goal-web/database\">database - 数据库组件</a></li>\n<li><a href=\"https://github.com/goal-web/auth\">auth - 用户认证</a></li>\n<li><a href=\"https://github.com/goal-web/http\">http - http服务，含路由、sse</a></li>\n<li><a href=\"https://github.com/goal-web/session\">session - 会话服务</a></li>\n<li><a href=\"https://github.com/goal-web/websocket\">websocket - websocket库，依赖http库</a></li>\n<li><a href=\"https://github.com/goal-web/queue\">queue - 消息队列，支持kafka、nsq驱动</a></li>\n<li><a href=\"https://github.com/goal-web/email\">email - 邮件</a></li>\n<li><a href=\"https://github.com/goal-web/filesystem\">filesystem - 文件系统</a></li>\n<li><a href=\"https://github.com/goal-web/events\">events - 事件系统</a></li>\n<li><a href=\"https://github.com/goal-web/micro\">micro - 微服务封装，基于 go-micro</a></li>\n</ul>\n<h2 id=\"第三方-sdk\">第三方 SDK</h2>\n<ul>\n<li><a href=\"https://github.com/qbhy/goal-alipay\">支付宝sdk</a></li>\n<li><a href=\"https://github.com/qbhy/goal-wechat\">微信sdk</a></li>\n<li><a href=\"https://github.com/qbhy/goal-aliyun\">阿里云sdk</a></li>\n<li>极光推送 sdk</li>\n<li>字节跳动 sdk</li>\n<li>QQ sdk</li>\n<li>更多 SDK 。。。</li>\n</ul>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
                   "goal组件"
            ],
            "date_published": "2022-03-08T16:39:59+08:00",
            "date_modified": "2022-03-12T11:52:08+08:00"
        },
        {
            "id": "https://goal-web.com/join-goal.html",
            "url": "https://goal-web.com/join-goal.html",
            "title": "Join Goal",
            "summary": "参与项目 你可以通过以下方式参与到项目中来 微信群 QQ群",
            "content_html": "<h2 id=\"参与项目\">参与项目</h2>\n<p>你可以通过以下方式参与到项目中来</p>\n<ul>\n<li>完善已有模块（优化或者改bug）</li>\n<li>完善或者修复测试用例</li>\n<li>开发新的模块（比如标记为未完成的模块）</li>\n<li>添加或者修改完善注释（用英语）</li>\n<li>修改错别字或者不当用词（文档和代码都可以，比如变量命名）</li>\n<li>帮助开发独立文档（readme是临时的，后面需要独立的文档项目）</li>\n<li>开发扩展包（goal 的扩展相当容易，后面我会写教程，现阶段进群聊）</li>\n<li>使用 goal 实现各种例子（放examples文件夹或者新建仓库在这里引用）</li>\n<li>更多方式进群聊吧</li>\n</ul>\n<h2 id=\"交流\">交流</h2>\n<p>微信群<br><img loading=\"lazy\" style=\"max-width: 200px\" src=\"https://s2.loli.net/2022/03/03/n9jESh6r4e3WQsL.png\" data-is-external-image=\"true\" /><br>QQ群<br><img loading=\"lazy\" style=\"max-width: 200px\" src=\"https://s2.loli.net/2022/03/08/wAdeRgFZQUHaCXl.png\" data-is-external-image=\"true\" /></p>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
            ],
            "date_published": "2022-03-08T16:36:37+08:00",
            "date_modified": "2022-03-10T23:40:46+08:00"
        },
        {
            "id": "https://goal-web.com/goal-framework.html",
            "url": "https://goal-web.com/goal-framework.html",
            "title": "Goal Framework",
            "summary": "goal 一个继承了 laravel 思想的 golang web 框架 goal 通过容器和服务提供者作为框架的核心，以 contracts 为桥梁，为开发者提供丰富的功能和服务，这点与 laravel 是相似的。 你可以通过以下方式参与到项目中来 微信群 QQ群",
            "content_html": "<h1 id=\"goal\">goal</h1>\n<p>一个继承了 laravel 思想的 golang web 框架</p>\n<h2 id=\"框架特点\">框架特点</h2>\n<p>goal 通过容器和服务提供者作为框架的核心，以 contracts 为桥梁，为开发者提供丰富的功能和服务，这点与 laravel 是相似的。</p>\n<ul>\n<li>强大的容器</li>\n<li>服务提供者</li>\n<li>契约精神</li>\n</ul>\n<h2 id=\"链接\">链接</h2>\n<ul>\n<li><a href=\"https://github.com/goal-web/goal\">goal 仓库</a></li>\n<li><a href=\"https://github.com/goal-web/goal/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">快速开始</a></li>\n<li><a href=\"https://github.com/goal-web/goal/wiki/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\">目录结构</a></li>\n</ul>\n<h2 id=\"功能特性\">功能特性</h2>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> examples 各种程序的例子（还在完善中…）</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> contracts 定义模块接口</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> container 容器实现！！！</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> pipeline 简单但是很强大的洋葱模型的管道</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> supports 支持库<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> logs 日志模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> collection 集合库</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> utils 工具库，封装了包含字符串处理、默认参数处理、类型转换、反射等工具函数</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> application 应用<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> exceptions 异常处理模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> signal 信号监听，goal 实现了优雅关闭功能</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> config 配置模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> redis Redis模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> cache 缓存模块<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> redis</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> memory 将数据存储在内存中，不支持持久化和分布式</li>\n<li><input disabled=\"\" type=\"checkbox\"> memcached</li>\n<li><input disabled=\"\" type=\"checkbox\"> file</li>\n<li><input disabled=\"\" type=\"checkbox\"> database 数据库驱动</li>\n<li><input disabled=\"\" type=\"checkbox\"> multi 高可用多级缓存</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> encryption 加密模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> hashing 哈希模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> validation 数据校验模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> mail 邮件模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> events 事件模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> filesystem 文件系统模块<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> local 本地文件系统</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> qiniu 七牛文件系统</li>\n<li><input disabled=\"\" type=\"checkbox\"> oss 阿里云文件系统</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> database 数据库操作模块<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> query builder 查询构造器</li>\n<li><input disabled=\"\" type=\"checkbox\"> seeders 数据填充</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> migration 数据迁移</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> drivers 数据库驱动<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> mysql</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> postgresql</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> sqlite</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> clickhouse</li>\n<li><input disabled=\"\" type=\"checkbox\"> sqlserver</li>\n<li><input disabled=\"\" type=\"checkbox\"> oracle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> eloquent ORM模块，计划 golang 1.18 发布后完成，因为泛型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> http http相关模块，请求、响应、中间件等<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> sse server-sent-events模块(简称sse)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> routing http 路由服务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> session 会话服务<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> cookie 将会话信息存储到加密的 cookie 中</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> redis</li>\n<li><input disabled=\"\" type=\"checkbox\"> file</li>\n<li><input disabled=\"\" type=\"checkbox\"> database</li>\n<li><input disabled=\"\" type=\"checkbox\"> memcached</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> console 命令行模块<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> commands 自定义命令模块</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> scheduling 任务调度模块</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> auth 用户认证模块<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> gate 用户授权模块</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> serialize 序列化模块<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> json</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> xml</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> gob</li>\n<li><input disabled=\"\" type=\"checkbox\"> protobuf</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> queue 消息队列模块<ul>\n<li><input disabled=\"\" type=\"checkbox\"> redis</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> kafka</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> nsq</li>\n<li><input disabled=\"\" type=\"checkbox\"> rocketMQ</li>\n<li><input disabled=\"\" type=\"checkbox\"> rabbitMQ</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> rate limiter 限流器</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> bloom-filter 布隆过滤器<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> file 持久化到文件</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> redis 通过 redis bit 实现的过滤器，支持分布式</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> websocket socket通信模块<ul>\n<li><input disabled=\"\" type=\"checkbox\"> socket.io socket.io 实现</li>\n</ul>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> micro 远程调用模块（集成 go-micro）<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> grpc</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 服务发现</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 负载均衡</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 自定义 go-micro</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/goal-web/microdemo\">微服务demo</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 第三方sdk<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/qbhy/goal-alipay\">支付宝sdk</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/qbhy/goal-wechat\">微信sdk</a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/qbhy/goal-aliyun\">阿里云sdk</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> 极光推送 sdk</li>\n<li><input disabled=\"\" type=\"checkbox\"> 字节跳动 sdk</li>\n<li><input disabled=\"\" type=\"checkbox\"> QQ sdk</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参与项目\">参与项目</h2>\n<p>你可以通过以下方式参与到项目中来</p>\n<ul>\n<li>完善已有模块（优化或者改bug）</li>\n<li>完善或者修复测试用例</li>\n<li>开发新的模块（比如标记为未完成的模块）</li>\n<li>添加或者修改完善注释（用英语）</li>\n<li>修改错别字或者不当用词（文档和代码都可以，比如变量命名）</li>\n<li>帮助开发独立文档（readme是临时的，后面需要独立的文档项目）</li>\n<li>开发扩展包（goal 的扩展相当容易，后面我会写教程，现阶段进群聊）</li>\n<li>使用 goal 实现各种例子（放examples文件夹或者新建仓库在这里引用）</li>\n<li>更多方式进群聊吧</li>\n</ul>\n<h2 id=\"交流\">交流</h2>\n<p>微信群<br><img loading=\"lazy\" style=\"max-width: 200px\" src=\"https://s2.loli.net/2022/03/03/n9jESh6r4e3WQsL.png\" data-is-external-image=\"true\" /><br>QQ群<br><img loading=\"lazy\" style=\"max-width: 200px\" src=\"https://i.loli.net/2021/10/29/dpLvehizJCX7EUN.jpg\" data-is-external-image=\"true\" /></p>\n",
            "author": {
                "name": "qbhy"
            },
            "tags": [
            ],
            "date_published": "2022-03-08T16:34:32+08:00",
            "date_modified": "2022-03-08T17:59:52+08:00"
        }
    ]
}
